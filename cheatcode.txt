# Bit manipulation
Runs around the binary representation of the input, 0 or 1.
White solving such question, consider below key-points :
- Try using xor operation
- Try figuring out if mask can help, to distinguish between following pattern or non-following pattern.

# Greedy
The first think which should come to your mind is, lets grab what is most relevant to the situation.
Sorting will definitely help. For optimization, you can check if some condition is being held true for some item/user/val,
whether it will held true for neighbours of left or right side. 

# Linked-list
- Try to use recusion, consider the prev, current, next possible nodes.

# Sliding window
- Window will have a start and end, consider pruning the start variable instead of end to update the window size.

# Subarray count with some condition
- Using map with prefix-sum might help to get the count, initialize for 0th or empty value first.

# Stack
- Considering traversing in either direction, recursion might help(stack pop and push with backtracking)

# Tree
- Try considering the situation of the given question based on different traversal methods.
- Level-order with queue, vertical-order with column and queue
- For space-optimized questions, morris traversal might help
- In case of problem around Binary-search tree, try using login incorporated with in-order traversal.

https://leetcode.com/problems/maximum-binary-tree/description/
https://leetcode.com/problems/maximum-binary-tree-ii/description/
https://leetcode.com/problems/merge-two-binary-trees/
https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/description/